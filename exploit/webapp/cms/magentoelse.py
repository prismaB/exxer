class mageeto:
    def magento():
        import os
        import sys
        magentosqli = input("magento>")
        if magentosqli == "back":
            os.system("exxer")
        if magentosqli == "help":
            print(helpmenu)
        if magentosqli == "exploit" or magentosqli == "send" or magentosqli == "run":
            magentotarget = input("add target>")
            print("target is => " + " " + magentotarget)
            os.system("python3 /usr/share/exxer/exploit/webapp/cms/magento-sqli.py" +  " " + magentotarget)
        if magentosqli == "back":
            os.system("exxer")
        if magentosqli == "exit":
            sys.exit()
        if magentosqli == "quit":
            sys.exit()
        if magentosqli == "clear":
            subprocess.call("clear")
            magentosqli = input("magento>")
        if magentosqli == "info":
            maginfo = """
            #
            # SOURCE & SINK
            # The sink (from-to SQL condition) has been present from Magento 1.x onwards.
            # The source (/catalog/product_frontend_action/synchronize) from 2.2.0.
            # If your target runs Magento < 2.2.0, you need to find another source.
            #
            # SQL INJECTION
            # The exploit can easily be modified to obtain other stuff from the DB, for
            # instance admin/user password hashes.
            #
            """
            print(maginfo)
            magentosqli = input("magento>")
        if magentosqli == "edit":
            os.system("nano /usr/share/exxer/exploit/webapp/cms/magento-sqli.py")
            magentosqli = input("magento>")
        else:
            print("Ä±nvalid command")
            os.system("python3 /usr/share/exxer/exploit/webapp/cms/magentoelse.py")
    magento()